From 57298a81b08b05f8258c483b025ccb4e46d38298 Mon Sep 17 00:00:00 2001
From: Sylvain Corlay <sylvain.corlay@gmail.com>
Date: Fri, 2 Mar 2018 16:17:41 +0100
Subject: [PATCH] Workaround overload of operator&

---
 lib/Interpreter/ValueExtractionSynthesizer.cpp | 17 +++++++++++------
 1 file changed, 11 insertions(+), 6 deletions(-)

diff --git a/lib/Interpreter/ValueExtractionSynthesizer.cpp b/lib/Interpreter/ValueExtractionSynthesizer.cpp
index 9245ff2..1893299 100644
--- a/lib/Interpreter/ValueExtractionSynthesizer.cpp
+++ b/lib/Interpreter/ValueExtractionSynthesizer.cpp
@@ -348,7 +348,17 @@ namespace {
         // we need to get the address of the references
         Expr* AddrOfE = m_Sema->BuildUnaryOp(/*Scope*/0, noLoc, UO_AddrOf,
                                              E).get();
-        CallArgs.push_back(AddrOfE);
+
+        QualType AddrOfETy = (AddrOfE) ? AddrOfE->getType() : m_Context->VoidTy;
+
+        // If the underlying type has overloaded `operator&` to return a
+        // non-pointer type, expression AddrOfE may not be a pointer.
+        // Cf. https://github.com/vgvassilev/cling/issues/176
+        // We ignore this case.
+        if (AddrOfETy->isAnyPointerType())
+        {
+            CallArgs.push_back(AddrOfE);
+        }
       }
       else if (desugaredTy->isAnyPointerType()) {
         // function pointers need explicit void* cast.
@@ -375,11 +385,6 @@ namespace {
         Call = m_Sema->ActOnCallExpr(/*Scope*/0, m_UnresolvedNoAlloc,
                                    locStart, CallArgs, locEnd);
       }
-      else {
-        m_Sema->Diag(locStart, diag::err_unsupported_unknown_any_decl) <<
-          utils::TypeName::GetFullyQualifiedName(desugaredTy, *m_Context) <<
-          SourceRange(locStart, locEnd);
-      }
     }
 
 
-- 
2.5.3

